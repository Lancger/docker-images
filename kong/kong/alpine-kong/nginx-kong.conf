charset UTF-8;

#error_log syslog:server=kong-hf.mashape.com:61828 error;

error_log /dev/stderr notice;
default_type  application/octet-stream;
#http2_chunk_size 8k;
#http2_body_preread_size 64k;
#http2_idle_timeout 15m;
#http2_max_concurrent_streams 512;
#http2_max_field_size 4k;
#http2_max_header_size 16k;
#http2_recv_buffer_size 256k;
#http2_recv_timeout 30s;

  #log_format combined '$remote_addr - $remote_user [$time_local] '
  #            '"$request" $status $body_bytes_sent '
  #            '"$http_referer" "$http_user_agent"';
  uninitialized_variable_warn off;
  #open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;
  server_tokens off;
  #重定向使用域名(Host头)
  server_name_in_redirect on;
  server_names_hash_bucket_size 256;
  connection_pool_size 4096;
  disable_symlinks off;
  etag on;
  ignore_invalid_headers on;
  merge_slashes on;
  keepalive_disable msie6;
  client_header_buffer_size 4k;
  large_client_header_buffers 4 32k;
  client_header_timeout  1m;
  client_body_timeout    1m;
  reset_timedout_connection on;
  send_timeout           1m;

  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 1;
  open_file_cache_errors on;
  read_ahead 128k;
  sendfile        on;
  sendfile_max_chunk 512k;
# aio threads=default;
# aio_write on;
# aio sendfile;
# aio threads;
# directio 4m;
  tcp_nodelay   on;
  tcp_nopush    on;
  client_max_body_size 100m;
  client_body_buffer_size 8m;
  types_hash_max_size 2048;
  request_pool_size 4k;
  keepalive_timeout  60;
  keepalive_requests 5000;
  lingering_close on;
  recursive_error_pages      on;
  output_buffers 8 64k;
  postpone_output 1460;

  fastcgi_connect_timeout      600;
  fastcgi_intercept_errors      on;
  fastcgi_send_timeout         600;
  fastcgi_read_timeout         600;
  fastcgi_buffer_size          128k;
  fastcgi_buffers 16           256k;
  fastcgi_busy_buffers_size    256k;
  fastcgi_temp_file_write_size 256k;
  #fastcgi_temp_path  /var/tmp/fastcgi_temp;
  #client_body_temp_path  /var/tmp/client_body_temp;
  #fastcgi_cache_path /var/run/nginx/fastcgi_cache levels=2:2 keys_zone=TEST:320m inactive=16m max_size=2g;
  #fastcgi_cache        TEST;
  #fastcgi_cache_key  unix:/var/run/php-fpm.sock$request_uri;
  #fastcgi_cache_key  127.0.0.1:9000$request_uri;
  #fastcgi_cache_key  $request_method://$host$request_uri;
  #fastcgi_cache_methods  POST;
  #fastcgi_cache_valid 200 302 1h;
  #fastcgi_cache_valid 301 2h;
  #fastcgi_cache_valid any 1m;
  #fastcgi_cache_min_uses 1;
  #fastcgi_cache_use_stale error timeout invalid_header http_500;
  #fastcgi_keep_conn on;

  #proxy_cache仅用于前端反向代理，后端关掉避免浪费内存
  #proxy_cache_path  /var/lib/nginx/tmp/proxy_cache  levels=2:2 keys_zone=proxy_cache:512m inactive=2d max_size=8g;
  proxy_cache_methods GET HEAD;
  #proxy_cache_background_update on;
  proxy_http_version 1.1;
  proxy_set_header Connection "";
  proxy_set_header Host  $host;
  #proxy_set_header Accept-Encoding 'gzip';
  #proxy_set_header X-Real-IP $realip_remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto   $scheme;
  #避免一次将大文件加入缓存
  proxy_set_header Range $http_range;
  proxy_set_header If-Range $http_if_range;
  proxy_no_cache  $http_range $http_if_range;
  proxy_hide_header X-Powered-By;
  proxy_cache_lock          off;
  proxy_cache_lock_timeout  5s;
  proxy_cache_use_stale     error timeout invalid_header http_403 http_404 http_500 http_502 http_503 http_504;
  #不在静态定义列表的内容都视为动态内容，不进行缓存,避免缓存导致访问异常
  proxy_buffering off;
  proxy_connect_timeout 600;
  proxy_send_timeout 600;
  proxy_read_timeout 600;
  proxy_buffer_size 128k;
  proxy_buffers 8 128k;
  proxy_busy_buffers_size 256k;
  proxy_temp_file_write_size 256k;
  proxy_max_temp_file_size 64m;
  #屏蔽后端错误信息
  proxy_intercept_errors  on;
  proxy_ignore_client_abort on;
  #proxy_temp_path  /var/lib/nginx/tmp/proxy;
  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

  #gzip  on;
  #gzip_disable "msie6";
  #gzip_static on;
  #gzip_proxied any;
  #gzip_min_length  4k;
  #gzip_buffers     32 8k;
  #gzip_http_version 1.1;
  #gzip_comp_level 4;
  #gzip_types       text/plain text/css text/xml text/javascript application/json application/x-javascript application/javascript application/xml application/xml+rss;
  #gzip_vary on;

client_max_body_size 0;
proxy_ssl_server_name on;
underscores_in_headers on;

lua_package_path './?.lua;./?/init.lua;;;';
lua_package_cpath ';;';
lua_socket_pool_size 30;
lua_max_running_timers 4096;
lua_max_pending_timers 16384;
lua_shared_dict kong                5m;
lua_shared_dict kong_db_cache       128m;
lua_shared_dict kong_db_cache_miss 12m;
lua_shared_dict kong_locks          8m;
lua_shared_dict kong_process_events 5m;
lua_shared_dict kong_cluster_events 5m;
lua_shared_dict kong_healthchecks   5m;
lua_shared_dict kong_rate_limiting_counters 12m;
lua_socket_log_errors off;

# injected nginx_http_* directives
lua_shared_dict prometheus_metrics 5m;

init_by_lua_block {
    Kong = require 'kong'
    Kong.init()
}

init_worker_by_lua_block {
    Kong.init_worker()
}


upstream kong_upstream {
    server 0.0.0.1;
    balancer_by_lua_block {
        Kong.balancer()
    }
    keepalive 60;
}

server {
    server_name kong;
    listen 0.0.0.0:8000 backlog=16384 deffered bind so_keepalive=on default_server;
    listen 0.0.0.0:8443 ssl backlog=16384 bind deferred so_keepalive=on http2 default_server;
    error_page 400 404 408 411 412 413 414 417 494 /kong_error_handler;
    error_page 500 502 503 504 /kong_error_handler;

    access_log /dev/stdout;
    error_log /dev/stderr notice;

    client_body_buffer_size 8k;

    ssl_certificate /usr/local/kong/ssl/kong-default.crt;
    ssl_certificate_key /usr/local/kong/ssl/kong-default.key;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_certificate_by_lua_block {
        Kong.ssl_certificate()
    }

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;


    real_ip_header     X-Real-IP;
    real_ip_recursive  off;

    # injected nginx_proxy_* directives

    location / {
        default_type                     '';

        set $ctx_ref                     '';
        set $upstream_host               '';
        set $upstream_upgrade            '';
        set $upstream_connection         '';
        set $upstream_scheme             '';
        set $upstream_uri                '';
        set $upstream_x_forwarded_for    '';
        set $upstream_x_forwarded_proto  '';
        set $upstream_x_forwarded_host   '';
        set $upstream_x_forwarded_port   '';

        rewrite_by_lua_block {
            Kong.rewrite()
        }

        access_by_lua_block {
            Kong.access()
        }

        proxy_http_version 1.1;
        proxy_set_header   Host              $upstream_host;
        proxy_set_header   Upgrade           $upstream_upgrade;
        proxy_set_header   Connection        $upstream_connection;
        proxy_set_header   X-Forwarded-For   $upstream_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $upstream_x_forwarded_proto;
        proxy_set_header   X-Forwarded-Host  $upstream_x_forwarded_host;
        proxy_set_header   X-Forwarded-Port  $upstream_x_forwarded_port;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_pass_header  Server;
        proxy_pass_header  Date;
        proxy_ssl_name     $upstream_host;
        proxy_pass         $upstream_scheme://kong_upstream$upstream_uri;

        header_filter_by_lua_block {
            Kong.header_filter()
        }

        body_filter_by_lua_block {
            Kong.body_filter()
        }

        log_by_lua_block {
            Kong.log()
        }
    }

    location = /kong_error_handler {
        internal;
        uninitialized_variable_warn off;

        content_by_lua_block {
            Kong.handle_error()
        }

        header_filter_by_lua_block {
            Kong.header_filter()
        }

        body_filter_by_lua_block {
            Kong.body_filter()
        }

        log_by_lua_block {
            Kong.log()
        }
    }
}

